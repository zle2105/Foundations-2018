










(there's one technique that uses this one)
Before we've used .attr('class'...) to always be the same thing - all circles, or all rectangles, etc. But what if we made lines /and/ circles /and/ text all share the same class?












When saving the class, be sure to watch out for things like capital letters, spaces, etc. Maybe the first graph (the bar graph) had something involving this?










What's the tag name for the lines? circles are <circle> and text is <text>, but is the line...?








If we hover over something and get the state name or whatever (BE SURE TO USE CONSOLE.LOG(D) A LOT), how can we turn that into the class we're looking for?














Start by using console.log to display your d, then use console.log to display the name of the class you're aiming to highlight, then go out and select it.
















You'll want to use console.log(d) a lot in this to see what the data looks like - it isn't always the same as in the csv! Especially for the line, it's real weird. It's going to be kind of like when you're scraping or using an API and need to pick around a bit.











If I have the string "maryland", for example, as a string (and class I'd like to select), how do I turn that into ".maryland" to use with svg.selectAll?













If you'd like to select certain types of elements with a certain class, you can do them both at the same time. "line.austria" would fine only lines with the class of "austria" and "circle.mali" woudl find only circles with the class of "mali"


































In the first piece of the homework with the buttons, when we highlighted something we made everything else unselected first. You don't need to do that in this case! You only need to say "make me highlighted!" and when you mouse off, "make me un-highlighted!"































(there's a different technique that uses this one)
When you click or hover, you have function (d), which means you can use d.state or whatever to get the current state's name, right? But if you have another function(d) inside of that function(d), you lose your original d.state - maybe save it as stateName? But honestly you should probably use the classes way. It's so much easier. In fact: yes, use the classes way, don't use this way. Please. If you're writing function(d) inside of a function (d) then you're probably making it too complicated for yourself.


















You can use .raise() to bring a selection in 'front' of the other elements. For example, if you have a line that was drawn earlier, later-drawn lines will show up on top of it. If you hover over that earlier line, though, you want it to display in full! So you'd use .raise() to move it on up.


